I"]o<h2 id="1-개요">1. 개요</h2>

<p>Apache, OHS 의 SSLSessionCache 에서 사용되는 Mutex와 Semaphore 에 대해서 간략하게 알아본다.</p>

<h2 id="2-설명">2. 설명</h2>

<p>고객의 <code class="language-plaintext highlighter-rouge">ssl.conf</code> 설정값으로 다음의 기본값이 지정되었다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre>#   Inter-Process Session Cache:
#   Configure the SSL Session Cache: First the mechanism
#   to use, second the expiring timeout (in seconds) and third
#   the mutex to be used.
    SSLSessionCache "shmcb:${ORACLE_INSTANCE}/servers/${COMPONENT_NAME}/logs/ssl_scache(512000)"
    SSLSessionCacheTimeout  300
    &lt;IfModule !mpm_winnt_module&gt;
      Mutex pthread ssl-cache
    &lt;/IfModule&gt;
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>SSLSessionCache : Mechanism</li>
  <li>SSLSessionCacheTimeout : Expiring timeout (in seconds)</li>
  <li>Mutex : Mutex to be used</li>
</ul>

<p>다음의 Error와 함께, 기동이 되지 않았다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>(13)Permission denied: AH00023: Couldn't create the ssl-cache mutex
</pre></td></tr></tbody></table></code></pre></div></div>

<p>해당 사례를 살펴보기 위해 Apache 컴파일 소스를 뒤져보았다.</p>

<h2 id="3-mutex">3. Mutex</h2>

<ul>
  <li>Mutual Exclusion (상호 배제)</li>
  <li>공유 자원에, Only 1개의 Thread만 접근 가능하도록 하는 기법</li>
  <li>1개 Thread가 자원 접근이 “가능할 때”  Lock을 걸고 공유 자원이 있는 “임계 영역(Critical Section)”에 접근</li>
  <li>Lock을 가지고 있는 Thread만이 Lock Release 하여 빠져나올 수 있음</li>
</ul>

<p>chatgpt의 example code를 보면,</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.concurrent.locks.Lock</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.concurrent.locks.ReentrantLock</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MutexExample</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">Lock</span> <span class="n">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ReentrantLock</span><span class="o">();</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
        <span class="nc">Thread</span> <span class="n">thread1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nc">IncrementThread</span><span class="o">());</span>
        <span class="nc">Thread</span> <span class="n">thread2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nc">IncrementThread</span><span class="o">());</span>

        <span class="n">thread1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="n">thread2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>

        <span class="n">thread1</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
        <span class="n">thread2</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Final counter value: "</span> <span class="o">+</span> <span class="n">counter</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">IncrementThread</span> <span class="kd">implements</span> <span class="nc">Runnable</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="n">counter</span><span class="o">++;</span>
                <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
                    <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>공통자원 lock을 Thread 1개만 소유할 수 있어, Mutex 가 증명된다.</p>

<h2 id="4-semaphore">4. Semaphore</h2>

<ul>
  <li>기찻길에서 선로를 가리키는 “깃발” 이 어원.</li>
  <li>Mutex와 상당히 유사하나 다른 점은,
    <ul>
      <li>Mutex는 임계 영역에 접근하기 위해, 1개 Thread가 Lock을 소유하고 있다.</li>
      <li>Semaphore는 Lock을 소유하지 않고, 접근 가능한 수(count)를 보고 진입한다.</li>
      <li>Semaphore에 접근하려는 Thread 만큼 count를 줄이고, 0보다 클 경우 임계 영역에 접근한다.</li>
      <li>즉, Semaphore는 count 만큼 누구나, 동시에 들어설 수 있다.</li>
    </ul>
  </li>
  <li>count(동시 접근 가능 수)가 1인 경우, binary mutex라고 함.</li>
</ul>

<p>example code.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.concurrent.Semaphore</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SemaphoreExample</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">NUM_THREADS</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">Semaphore</span> <span class="n">semaphore</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Semaphore</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
        <span class="nc">Thread</span><span class="o">[]</span> <span class="n">threads</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">[</span><span class="no">NUM_THREADS</span><span class="o">];</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="no">NUM_THREADS</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">threads</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nc">WorkerThread</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
            <span class="n">threads</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">start</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="no">NUM_THREADS</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">threads</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">join</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"All threads have finished."</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">WorkerThread</span> <span class="kd">implements</span> <span class="nc">Runnable</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>

        <span class="kd">public</span> <span class="nf">WorkerThread</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Thread "</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">" is waiting for a permit."</span><span class="o">);</span>
                <span class="n">semaphore</span><span class="o">.</span><span class="na">acquire</span><span class="o">();</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Thread "</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">" has acquired a permit."</span><span class="o">);</span>
                <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
            <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Thread "</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">" is releasing the permit."</span><span class="o">);</span>
                <span class="n">semaphore</span><span class="o">.</span><span class="na">release</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>lock은 없고, Thread 10개 중에서 Semaphore count 3만큼만 참여한다.</p>

<h2 id="5-view-source-in-httpd">5. View Source In httpd</h2>

<p>httpd/modules/ssl/ssl_private.h 에서 ssl-cache 정의를 확인할 수 있다.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="cm">/**  Mutex Support  */</span>
<span class="kt">int</span>          <span class="nf">ssl_mutex_init</span><span class="p">(</span><span class="n">server_rec</span> <span class="o">*</span><span class="p">,</span> <span class="n">apr_pool_t</span> <span class="o">*</span><span class="p">);</span>
<span class="kt">int</span>          <span class="nf">ssl_mutex_reinit</span><span class="p">(</span><span class="n">server_rec</span> <span class="o">*</span><span class="p">,</span> <span class="n">apr_pool_t</span> <span class="o">*</span><span class="p">);</span>
<span class="kt">int</span>          <span class="nf">ssl_mutex_on</span><span class="p">(</span><span class="n">server_rec</span> <span class="o">*</span><span class="p">);</span>
<span class="kt">int</span>          <span class="nf">ssl_mutex_off</span><span class="p">(</span><span class="n">server_rec</span> <span class="o">*</span><span class="p">);</span>

<span class="kt">int</span>          <span class="nf">ssl_stapling_mutex_reinit</span><span class="p">(</span><span class="n">server_rec</span> <span class="o">*</span><span class="p">,</span> <span class="n">apr_pool_t</span> <span class="o">*</span><span class="p">);</span>

<span class="cm">/* mutex type names for Mutex directive */</span>
<span class="cp">#define SSL_CACHE_MUTEX_TYPE    "ssl-cache"
#define SSL_STAPLING_CACHE_MUTEX_TYPE "ssl-stapling"
#define SSL_STAPLING_REFRESH_MUTEX_TYPE "ssl-stapling-refresh"
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>httpd/modules/ssl/ssl_engine_mutex.c 에서 mutex 를 통한 lock 구현 호출 지점</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre> <span class="k">if</span> <span class="p">((</span><span class="n">rv</span> <span class="o">=</span> <span class="n">ap_global_mutex_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mc</span><span class="o">-&gt;</span><span class="n">pMutex</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">SSL_CACHE_MUTEX_TYPE</span><span class="p">,</span>
                                     <span class="nb">NULL</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">process</span><span class="o">-&gt;</span><span class="n">pool</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>


 <span class="k">if</span> <span class="p">((</span><span class="n">rv</span> <span class="o">=</span> <span class="n">apr_global_mutex_child_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mc</span><span class="o">-&gt;</span><span class="n">pMutex</span><span class="p">,</span>
                                          <span class="n">lockfile</span><span class="p">,</span>
                                          <span class="n">p</span><span class="p">))</span> <span class="o">!=</span> <span class="n">APR_SUCCESS</span><span class="p">)</span> 

										  
 <span class="k">if</span> <span class="p">((</span><span class="n">rv</span> <span class="o">=</span> <span class="n">apr_global_mutex_lock</span><span class="p">(</span><span class="n">mc</span><span class="o">-&gt;</span><span class="n">pMutex</span><span class="p">))</span> <span class="o">!=</span> <span class="n">APR_SUCCESS</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">ap_log_error</span><span class="p">(</span><span class="n">APLOG_MARK</span><span class="p">,</span> <span class="n">APLOG_WARNING</span><span class="p">,</span> <span class="n">rv</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">APLOGNO</span><span class="p">(</span><span class="mo">02026</span><span class="p">)</span>
                     <span class="s">"Failed to acquire SSL session cache lock"</span><span class="p">);</span>

					 
 <span class="k">if</span> <span class="p">((</span><span class="n">rv</span> <span class="o">=</span> <span class="n">apr_global_mutex_unlock</span><span class="p">(</span><span class="n">mc</span><span class="o">-&gt;</span><span class="n">pMutex</span><span class="p">))</span> <span class="o">!=</span> <span class="n">APR_SUCCESS</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">ap_log_error</span><span class="p">(</span><span class="n">APLOG_MARK</span><span class="p">,</span> <span class="n">APLOG_WARNING</span><span class="p">,</span> <span class="n">rv</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">APLOGNO</span><span class="p">(</span><span class="mo">02027</span><span class="p">)</span>
                     <span class="s">"Failed to release SSL session cache lock"</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>httpd/server/util_mutex.c 에서 mutex 구현과 다시 호출 지점이 확인된다.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="n">AP_DECLARE</span><span class="p">(</span><span class="n">apr_status_t</span><span class="p">)</span> <span class="n">ap_global_mutex_create</span><span class="p">(</span><span class="n">apr_global_mutex_t</span> <span class="o">**</span><span class="n">mutex</span><span class="p">,</span>
                                                <span class="k">const</span> <span class="kt">char</span> <span class="o">**</span><span class="n">name</span><span class="p">,</span>
                                                <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">type</span><span class="p">,</span>
                                                <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">instance_id</span><span class="p">,</span>
                                                <span class="n">server_rec</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="n">apr_pool_t</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span>
                                                <span class="n">apr_int32_t</span> <span class="n">options</span><span class="p">)</span>
<span class="p">{</span>

<span class="p">...</span>
    <span class="n">rv</span> <span class="o">=</span> <span class="n">apr_global_mutex_create</span><span class="p">(</span><span class="n">mutex</span><span class="p">,</span> <span class="n">fname</span><span class="p">,</span> <span class="n">mxcfg</span><span class="o">-&gt;</span><span class="n">mech</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
<span class="p">...</span>
    <span class="n">rv</span> <span class="o">=</span> <span class="n">ap_unixd_set_global_mutex_perms</span><span class="p">(</span><span class="o">*</span><span class="n">mutex</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="6-view-source-in-apr">6. View Source In apr</h2>

<p>여기서부터는 apr source.</p>

<p>apr/locks/unix/global_mutex.c</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="n">APR_DECLARE</span><span class="p">(</span><span class="n">apr_status_t</span><span class="p">)</span> <span class="n">apr_global_mutex_create</span><span class="p">(</span><span class="n">apr_global_mutex_t</span> <span class="o">**</span><span class="n">mutex</span><span class="p">,</span>
                                                  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">fname</span><span class="p">,</span>
                                                  <span class="n">apr_lockmech_e</span> <span class="n">mech</span><span class="p">,</span>
                                                  <span class="n">apr_pool_t</span> <span class="o">*</span><span class="n">pool</span><span class="p">)</span>
<span class="p">{</span>

<span class="p">...</span>
    <span class="n">rv</span> <span class="o">=</span> <span class="n">apr_proc_mutex_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">m</span><span class="o">-&gt;</span><span class="n">proc_mutex</span><span class="p">,</span> <span class="n">fname</span><span class="p">,</span> <span class="n">mech</span><span class="p">,</span> <span class="n">m</span><span class="o">-&gt;</span><span class="n">pool</span><span class="p">);</span>
<span class="p">...</span>
	<span class="n">rv</span> <span class="o">=</span> <span class="n">opr_thread_mutex_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">m</span><span class="o">-&gt;</span><span class="n">thread_mutex</span><span class="p">,</span> <span class="n">APR_THREAD_MUTEX_DEFAULT</span><span class="p">,</span> <span class="n">m</span><span class="o">-&gt;</span><span class="n">pool</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>apr/locks/unix/proc_mutex.c</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre><span class="n">APR_DECLARE</span><span class="p">(</span><span class="n">apr_status_t</span><span class="p">)</span> <span class="n">apr_proc_mutex_create</span><span class="p">(</span><span class="n">apr_proc_mutex_t</span> <span class="o">**</span><span class="n">mutex</span><span class="p">,</span>
                                                <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">fname</span><span class="p">,</span>
                                                <span class="n">apr_lockmech_e</span> <span class="n">mech</span><span class="p">,</span>
                                                <span class="n">apr_pool_t</span> <span class="o">*</span><span class="n">pool</span><span class="p">)</span>
<span class="p">{</span>
<span class="p">...</span>
    <span class="k">if</span> <span class="p">((</span><span class="n">rv</span> <span class="o">=</span> <span class="n">proc_mutex_create</span><span class="p">(</span><span class="n">new_mutex</span><span class="p">,</span> <span class="n">mech</span><span class="p">,</span> <span class="n">fname</span><span class="p">))</span> <span class="o">!=</span> <span class="n">APR_SUCCESS</span><span class="p">)</span>
<span class="p">...</span>

<span class="k">static</span> <span class="n">apr_status_t</span> <span class="n">proc_mutex_pthread_create</span><span class="p">(</span><span class="n">apr_proc_mutex_t</span> <span class="o">*</span><span class="n">new_mutex</span><span class="p">,</span>  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">fname</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">apr_status_t</span> <span class="n">rv</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">fd</span><span class="p">;</span>
    <span class="n">pthread_mutexattr_t</span> <span class="n">mattr</span><span class="p">;</span>

    <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">"/dev/zero"</span><span class="p">,</span> <span class="n">O_RDWR</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">errno</span><span class="p">;</span>
    <span class="p">}</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<p>proc_mutex.c 까지 소스를 추적하였는데, <code class="language-plaintext highlighter-rouge">proc_mutex_pthread_create</code> 메서드를 호출하는 지점을 찾지못하였다.</p>

<p>그러나, mutex lock 생성을 위해 <code class="language-plaintext highlighter-rouge">/dev/zero</code> 을 필요로 하는 것은 확인은 되었다.</p>

<h2 id="7-outcome">7. Outcome</h2>

<p>고객의 경우, 응답을 중지하여 해당 사례를 끝마치지 못하였지만</p>

<p><code class="language-plaintext highlighter-rouge">/dev/zero</code> 권한을 변경하여 해당 이슈 재현이 가능한 점을 보아 <code class="language-plaintext highlighter-rouge">/dev/zero</code> 가 이슈의 원인이었다.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-al</span> /dev/zero
crw-rw-rw- 1 root root 1, 5 Mar  2 11:24 /dev/zero

<span class="nv">$ </span><span class="nb">sudo chmod </span>666 /dev/zero

<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-al</span> /dev/zero
crw-rw-r-- 1 root root 1, 5 Mar  2 11:24 /dev/zero
</pre></td></tr></tbody></table></code></pre></div></div>

<p>zero 파일 권한 기본값은 666이며, others(apache 설치 계정) 권한을 4로 지정하여 write 를 제거하면 Mutex 생성 불가 이슈가 재현되었다.</p>
:ET