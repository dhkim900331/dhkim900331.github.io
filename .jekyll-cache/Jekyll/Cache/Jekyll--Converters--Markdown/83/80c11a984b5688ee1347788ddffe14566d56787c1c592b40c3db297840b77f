I"+.<h2 id="1-개요">1. 개요</h2>

<p><a href="How-To-Thread-Tuning-Coherence-Web-3">How-To-Thread-Tuning-Coherence-Web-3</a> 에서 몇가지 간단한 부하테스트와 함께, 튜닝에 효과가 있는지 살펴보았는데, 테스트 방식이 조잡하여 이번에 좀 더 정규화 과정으로 스크립트를 사용해본다.</p>
<p style="height:20px;"></p>
<h2 id="2-설명">2. 설명</h2>

<p>주기적 Session을 Scan하여 Timeout 된 객체는 invalidate 하여 IsValid=False로 변경하는 Reaper Thread에 대해서, 오랜시간 부하 테스트를 진행하여 성능 개선이 이뤄지는지 살펴본다.</p>
<p style="height:20px;"></p>
<h2 id="3-테스트-환경">3. 테스트 환경</h2>

<ul>
  <li>OS : Oracle Linux Server release 8.7</li>
  <li>JDK : 1.7.0_80</li>
  <li>WebLogic 11g</li>
  <li>Coherence 3.7.1.22 * WEB SPI</li>
</ul>
<p style="height:20px;"></p>
<ul>
  <li>JMeter
    <ul>
      <li>지속적으로 20 Users 부하를 주며, 빠르게 New Sessoin 생성</li>
    </ul>
  </li>
</ul>
<p style="height:20px;"></p>
<ul>
  <li>
    <p>Monitoring Script</p>

    <ul>
      <li>
        <p>다음의 Script로 데이터를 추출하여 통계를 내본다.</p>
      </li>
      <li>
        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
</pre></td><td class="rouge-code"><pre><span class="c1"># import
</span><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">time</span>
    
<span class="c1"># log file
</span><span class="n">fo</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"/tmp/coh.log"</span><span class="p">,</span> <span class="s">"wb+"</span><span class="p">)</span>
    
<span class="c1"># connection information
</span><span class="n">username</span> <span class="o">=</span> <span class="s">'weblogic'</span>
<span class="n">password</span> <span class="o">=</span> <span class="s">'weblogic1'</span>
<span class="n">url</span> <span class="o">=</span> <span class="s">'wls.local:8002'</span>
    
<span class="c1"># connect to server
</span><span class="n">connect</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="p">,</span> <span class="n">url</span><span class="p">)</span>
    
<span class="c1"># get LocalMemberId
</span><span class="n">cd</span><span class="p">(</span><span class="s">'custom:/Coherence/Coherence:type=Cluster'</span><span class="p">)</span>
<span class="n">localMemberId</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">get</span><span class="p">(</span><span class="s">'LocalMemberId'</span><span class="p">))</span>
    
<span class="c1"># change dir to cohSessionApp
</span><span class="n">cd</span><span class="p">(</span><span class="s">'custom:/Coherence/Coherence:type=WebLogicHttpSessionManager,nodeId='</span> <span class="o">+</span> <span class="n">localMemberId</span> <span class="o">+</span> <span class="s">',appId=cohSessionAppcohSessionApp'</span><span class="p">)</span>
    
    
<span class="n">gap</span> <span class="o">=</span> <span class="mi">5000</span>
<span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">):</span>
        <span class="c1">###### print MBeans ######
</span>        <span class="c1">### Attr to Var ###
</span>        <span class="c1"># Reaper Cycle
</span>        <span class="n">NextReapCycle</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">get</span><span class="p">(</span><span class="s">'NextReapCycle'</span><span class="p">))</span>
        <span class="n">LastReapCycle</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">get</span><span class="p">(</span><span class="s">'LastReapCycle'</span><span class="p">))</span>
    
        <span class="c1"># Reap Duration
</span>        <span class="n">AverageReapDuration</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">get</span><span class="p">(</span><span class="s">'AverageReapDuration'</span><span class="p">))</span>
        <span class="n">LastReapDuration</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">get</span><span class="p">(</span><span class="s">'LastReapDuration'</span><span class="p">))</span>
        <span class="n">MaxReapDuration</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">get</span><span class="p">(</span><span class="s">'MaxReapDuration'</span><span class="p">))</span>
    
        <span class="c1"># Reaped Sessions
</span>        <span class="n">AverageReapedSessions</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">get</span><span class="p">(</span><span class="s">'AverageReapedSessions'</span><span class="p">))</span>
        <span class="n">MaxReapedSessions</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">get</span><span class="p">(</span><span class="s">'MaxReapedSessions'</span><span class="p">))</span>
        <span class="n">ReapedSessions</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">get</span><span class="p">(</span><span class="s">'ReapedSessions'</span><span class="p">))</span>
        <span class="n">ReapedSessionsTotal</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">get</span><span class="p">(</span><span class="s">'ReapedSessionsTotal'</span><span class="p">))</span>
    
        <span class="c1"># Sessions
</span>        <span class="n">SessionUpdates</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">get</span><span class="p">(</span><span class="s">'SessionUpdates'</span><span class="p">))</span>
    
    
        <span class="c1">### Var to Log ###
</span>        <span class="n">dm</span> <span class="o">=</span> <span class="s">" | "</span>
        <span class="n">writeLogData</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span> <span class="o">+</span> <span class="n">dm</span>
        <span class="n">writeLogData</span> <span class="o">+=</span> <span class="n">NextReapCycle</span> <span class="o">+</span> <span class="n">dm</span>
        <span class="n">writeLogData</span> <span class="o">+=</span> <span class="n">LastReapCycle</span> <span class="o">+</span> <span class="n">dm</span>
    
        <span class="n">writeLogData</span> <span class="o">+=</span> <span class="n">AverageReapDuration</span> <span class="o">+</span> <span class="n">dm</span>
        <span class="n">writeLogData</span> <span class="o">+=</span> <span class="n">LastReapDuration</span> <span class="o">+</span> <span class="n">dm</span>
        <span class="n">writeLogData</span> <span class="o">+=</span> <span class="n">MaxReapDuration</span> <span class="o">+</span> <span class="n">dm</span>
    
        <span class="n">writeLogData</span> <span class="o">+=</span> <span class="n">AverageReapedSessions</span> <span class="o">+</span> <span class="n">dm</span>
        <span class="n">writeLogData</span> <span class="o">+=</span> <span class="n">MaxReapedSessions</span> <span class="o">+</span> <span class="n">dm</span>
        <span class="n">writeLogData</span> <span class="o">+=</span> <span class="n">ReapedSessions</span> <span class="o">+</span> <span class="n">dm</span>
        <span class="n">writeLogData</span> <span class="o">+=</span> <span class="n">ReapedSessionsTotal</span> <span class="o">+</span> <span class="n">dm</span>
    
        <span class="n">writeLogData</span> <span class="o">+=</span> <span class="n">SessionUpdates</span>
    
        <span class="n">fo</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">writeLogData</span><span class="o">+</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
        <span class="n">fo</span><span class="p">.</span><span class="n">flush</span><span class="p">()</span>
        <span class="k">print</span><span class="p">(</span><span class="n">writeLogData</span><span class="p">)</span>
        <span class="n">Thread</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">gap</span><span class="p">)</span>
    
<span class="n">fo</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
<span class="nb">exit</span><span class="p">()</span>
    
</pre></td></tr></tbody></table></code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>
<p style="height:20px;"></p>
<h2 id="4-performance-test">4. Performance Test</h2>

<p>Jmeter 20 Users 가 지속적으로 세션을 생성하는 과정에서, 위 스크립트로 자료를 모아 엑셀로 평균을 뽑아 보았다.</p>
<p style="height:20px;"></p>
<p><img src="/../assets/posts/images/20-Coherence/Performance-Test-In-Coherence-Web-3/Performance-Test-In-Coherence-Web-3_1.png" alt="Performance-Test-In-Coherence-Web-3_1" /></p>
<p style="height:20px;"></p>
<p>Row 순서대로, <code class="language-plaintext highlighter-rouge">wm/CoherenceWorkManager</code> 의 Min/MaxThreads를 4, 8, 16 순으로 유사하게 테스트한 결과의 평균치이다.</p>
<p style="height:20px;"></p>
<p>AverageReapDuraton, Threads가 증가할 수록 전체적으로 Reap Duration이 감소되었다.</p>

<p>LastReapDuration, 가장 최근의 Reap Duration</p>

<p>MaxReapDuration, 가장 높은 Reap Duration</p>

<p>AverageReapedSessions, 평균 Reaped 되는 Session 수, Threads가 늘었음에도 변화가 없다.</p>

<p>MaxReapedSessions, 가장 높은 Reaped 된 Session 수, Threads가 늘었음에도 변화가 없다.</p>

<p>ReapedSessions, 가장 최근에 Reaped 된 Session 수, Threads가 늘었음에도 변화가 없다.</p>

<p>ReapedSessionsTotal, 지금까지 총 Reaped 된 Session 수, Threads가 늘었음에도 변화가 없다.</p>

<p>SessionUpdates, Jmeter로 총 밀어넣은 Session 수</p>
<p style="height:20px;"></p>
<h2 id="5-outcome">5. Outcome</h2>

<p>위 스크립트는 5sec마다 수집하고, Reaper Thread의 주기(cycle)은 40초로, 약간 Missmatch 로 보여지는 테스트긴 하지만, Thread가 늘어남에 따라 Reap Duration이 상당히 개선되는 것이 확인된다.</p>

<p>다만, 이 당시에 CPU,MEM 사용률을 체크를 안한 것이 신경은 쓰인다.</p>

<p>또한, 매 테스트 시마다 거의 동일한 Jmeter의 부하량이 들어가므로, <code class="language-plaintext highlighter-rouge">Threads가 늘었음에도 변화가 없다.</code> 라는 메시지는 정당성이 부여될 수 있을 것 같다.</p>
<p style="height:20px;"></p>
<h2 id="6-references">6. References</h2>

<ul>
  <li><strong>Coherence Web Cache Montoring (Doc ID 2547017.1)</strong></li>
  <li><strong>How to Setup “Loop” and “Sleep” Wait in WLST Script (Doc ID 2860336.1)</strong></li>
</ul>
:ET