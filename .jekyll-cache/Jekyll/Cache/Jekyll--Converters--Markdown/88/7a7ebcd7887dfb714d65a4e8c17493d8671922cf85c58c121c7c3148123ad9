I"#<h2 id="1-개요">1. 개요</h2>

<p>얼마 전 고객사에서 XFF Header 값이 Apache Access Log에 찍히지 않았다.</p>

<p>앞단 Load Balancer에도 정상적으로 설정이 완료되었다는 엔지니어 확인 결과에도 동작하지 않았다.</p>

<p>사무실로 돌아와 LB 환경을 만들 수 없어, Apache VM을 2대를 이용하여 LB -&gt; WEB 환경을 모방하며 테스트 해보았다.</p>

<h2 id="2-request-flow">2. Request Flow</h2>

<p><img src="/../assets/posts/images/14-WebServer/X-Forwarded-For/X-Forwarded-For_1.png" alt="X-Forwarded-For_1" /></p>

<ul>
  <li>Request가 들어올 경우, 어떠한 흐름으로 처리되는지를 이해하기 위한 그림이다.</li>
  <li>순서대로, 사용자(Client) / LB (wellknown.com) / WEB (innerweb.com)</li>
  <li>사용자가 <code class="language-plaintext highlighter-rouge">http://wellknown.com</code> 접속 하면, LB는 곧이 곧대로 <code class="language-plaintext highlighter-rouge">http://innerweb.com</code> 에 proxy pass 한다.</li>
  <li>WEB (innerweb.com) 은 <code class="language-plaintext highlighter-rouge">http to https</code> 전환을 위해 RewriteRule 을 사용했다.</li>
</ul>

<h3 id="21-lb-wellknowncom">2.1 LB (wellknown.com)</h3>

<ul>
  <li>LB의 역할을 유사하게 하기 위해, HTTP와 HTTPS를 연결해주는 2개의 VirtualHost가 있다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="c"># 1. HTTP</span>
Listen 80

&lt;VirtualHost <span class="k">*</span>:80&gt;
ServerName wellknown.com

RewriteEngine On
RewriteCond %<span class="o">{</span>HTTP_HOST<span class="o">}</span> ^wellknown.com <span class="o">[</span>NC]
RewriteCond %<span class="o">{</span>SERVER_PORT<span class="o">}</span> 80
RewriteRule ^/<span class="o">(</span>.<span class="k">*</span><span class="o">)</span><span class="nv">$ </span>http://innerweb.com/<span class="nv">$1</span> <span class="o">[</span>P,L]
&lt;/VirtualHost&gt;
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p>HTTP 접속 시 , HTTP WEB으로 Proxied</p>
</blockquote>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre><span class="c"># 2. HTTPS</span>
Listen 443

SSLPassPhraseDialog  <span class="nb">builtin
</span>SSLCertificateFile    <span class="k">${</span><span class="nv">SRVROOT</span><span class="k">}</span>/cert/wellknown.com.crt
SSLCertificateKeyFile <span class="k">${</span><span class="nv">SRVROOT</span><span class="k">}</span>/cert/private.key

&lt;VirtualHost <span class="k">*</span>:443&gt;
ServerName wellknown.com

SSLEngine On
SSLProxyEngine On
SSLProxyVerify none
SSLProxyCheckPeerCN off
SSLProxyCheckPeerName off
SSLProxyCheckPeerExpire off

RewriteEngine On
RewriteCond %<span class="o">{</span>HTTP_HOST<span class="o">}</span> ^wellknown.com <span class="o">[</span>NC]
RewriteCond %<span class="o">{</span>SERVER_PORT<span class="o">}</span> 443
RewriteRule ^/<span class="o">(</span>.<span class="k">*</span><span class="o">)</span><span class="nv">$ </span>https://innerweb.com/<span class="nv">$1</span> <span class="o">[</span>P,L]
&lt;/VirtualHost&gt;
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p>HTTPS 접속 시, HTTPS WEB으로 Proxied</p>

  <p>LB 자체에도 https 통신을 위해 인증서가 필요하니, <code class="language-plaintext highlighter-rouge">wellknown.com.crt</code> 사설 인증서를 적용했다.</p>
</blockquote>

<h3 id="22-web-innerwebcom">2.2 WEB (innerweb.com)</h3>

<ul>
  <li>endpoint 인 WEB에는 <code class="language-plaintext highlighter-rouge">http to https</code> 역할만 추가로 있다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre>ServerName innerweb.com
RewriteEngine On

<span class="c"># 1. HTTP to HTTPS</span>
RewriteCond %<span class="o">{</span>HTTP_HOST<span class="o">}</span> ^innerweb<span class="se">\.</span>com
RewriteCond %<span class="o">{</span>SERVER_PORT<span class="o">}</span> 80
RewriteRule ^/<span class="o">(</span>.<span class="k">*</span><span class="o">)</span><span class="nv">$ </span>https://wellknown.com/<span class="nv">$1</span> <span class="o">[</span>R,L]
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>그리고, HTTPS VirtualHost가 있다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre>SSLPassPhraseDialog  <span class="nb">builtin
</span>SSLCertificateFile          <span class="k">${</span><span class="nv">CERT</span><span class="k">}</span>/innerweb.com.crt
SSLCertificateKeyFile       <span class="k">${</span><span class="nv">CERT</span><span class="k">}</span>/private.key

&lt;VirtualHost <span class="k">*</span>:443&gt;
ServerName innerweb.com
SSLEngine on
&lt;/VirtualHost&gt;
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="3-xff-호출-테스트">3. XFF 호출 테스트</h2>

<ul>
  <li>LogFormat은 다음과 같다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>LogFormat <span class="s2">"XFF=%{X-Forwarded-For}i A=%a H=%h %l %u %t </span><span class="se">\"</span><span class="s2">%r</span><span class="se">\"</span><span class="s2"> %&gt;s %b </span><span class="se">\"</span><span class="s2">%{Referer}i</span><span class="se">\"</span><span class="s2"> </span><span class="se">\"</span><span class="s2">%{User-Agent}i</span><span class="se">\"</span><span class="s2"> %D"</span> combined
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>Client IP가 <code class="language-plaintext highlighter-rouge">192.168.5.61</code> 인 곳에서, <code class="language-plaintext highlighter-rouge">http://wellknown.com</code> 호출 시. WEB http Access Log</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nv">XFF</span><span class="o">=</span>192.168.56.1 <span class="nv">A</span><span class="o">=</span>192.168.56.2 <span class="nv">H</span><span class="o">=</span>192.168.56.2 - - <span class="o">[</span>09/May/2022:15:03:00 +0900] <span class="s2">"GET / HTTP/1.1"</span> 302 206 <span class="s2">"-"</span> <span class="s2">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36"</span> 237
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>위 요청 시, 자동으로 사용자는 HTTP 302 <code class="language-plaintext highlighter-rouge">https://wellknown.com</code> 을 접속한다. 이때 WEB https Access Log</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nv">XFF</span><span class="o">=</span>192.168.56.1 <span class="nv">A</span><span class="o">=</span>192.168.56.2 <span class="nv">H</span><span class="o">=</span>192.168.56.2 - - <span class="o">[</span>09/May/2022:15:04:56 +0900] <span class="s2">"GET / HTTP/1.1"</span> 200 613 <span class="s2">"-"</span> <span class="s2">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36"</span> 538
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="4-마무리">4. 마무리</h2>

<p>사실상 표준 헤더(사실 표준 아님)인 XFF Header는 가공할 이유가 없다.</p>

<p>앞단 LB에서 XFF = Client.IP 를 가공해서 넘겨주기만 하면 되기 때문이다.</p>

<p>그러나, 어느 고객사 작업 시 HTTP 채널에서는 문제가 없으나, HTTPS 채널에서는 XFF 값이 보이지 않는 이슈가 있었는데</p>

<p>이를 증명 하기 위해 테스트하고 기록하였다.</p>

<p>다시금 고객하고 컨택하며, LB측 확인을 요청해야 겠지만..</p>

<p>그때 다시 결과를 기록하도록 한다.</p>
:ET